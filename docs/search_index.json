[["index.html", "리보그 세상(Reeborg’s World) 리보그 세상 0.1 러플 0.2 프로그래밍과 문제해결 0.3 리보그 기본 코딩방법 0.4 유용한 코딩 웹사이트", " 리보그 세상(Reeborg’s World) ANDRÉ ROBERGE, 이광춘 (번역) 2021-08-16 리보그 세상 리보그 세상(Reeborg’s World)는 컴퓨터 과학 언플러그드를 통해 전혀 컴퓨터가 없는 상태에서 주요 개념을 빠른 시간내에 잡을 수 있고, 이후 블록 프로그래밍(Block Programming)으로 MIT에서 개발한 스크래치(Scratch)와 타이디블록(Tidyblocks)를 통해 비쥬얼 프로그래밍을 즐길 수 있다. 그 다음 단계로 소프트웨어 프로그래밍 언어인 파이썬, 데이터 프로그래밍 언어인 R 로 바로 넘어가는 것이 아니라 move(), turn_left() 두개의 동사를 활용한 리보그 세상(Reeborg’s World)로 기초를 탄탄히 다져놓아야 한다. 0.1 러플 리보그 세상(Reeborg’s World)은 러플(RUR-PLE)으로 André Roberge 박사가 2004년부터 2010년까지 PC 설치형 버젼 코딩 교육을 제작한 것으로 인기를 얻었고 한글 버젼도 러플(RUR-PLE) 웹사이트에서 확인 가능하다. 0.2 프로그래밍과 문제해결 미국 항공우주국(NASA) JPL(제트 추진 연구소) 연구원 안드레 카스타노가 미국 남가주 방과후 교육에 수년에 걸쳐 가다듬은 소프트웨어 및 문제해결 교육 과정을 제작하여 인터넷에 공개하였는 리보그 세상(Reeborg’s World) 초기 버젼을 기반으로 제작하였다. 프로그래밍과 문제해결 웹사이트를 참고한다. 0.3 리보그 기본 코딩방법 스크래치(Scratch)와 타이디블록(Tidyblocks) 같은 블록 프로그래밍 언어가 WIMP를 활용한 클릭(click), 드래그(drag), 드랍(drop) 방식이라면 리보그는 별도 키보드가 있어 이를 활용하여 키보드와 편집기를 이용한 본격적인 프로그래밍 이전에 유용하게 활용할 수 있다. 0.4 유용한 코딩 웹사이트 컴퓨터 과학 언플러그드 TidyBlocks 모두를 위한 파이썬 소프트웨어 카펜트리 데이터 과학 글쓰기 저작 컴퓨터 문서저작 데이터 과학 기고문과 발표자료 사례 한국 R 컨퍼런스 "],["intro.html", "1 집 (Home) 1.1 Alone 1.2 Home 1 1.3 Home 2 1.4 Home 3 1.5 Home 4", " 1 집 (Home) 1.1 Alone 1.1.1 실행결과 1.1.2 코드 move() move() turn_left() move() 1.2 Home 1 1.2.1 실행결과 1.2.2 코드 move() move() 1.3 Home 2 1.3.1 실행결과 1.3.2 코드 move() move() 1.4 Home 3 1.4.1 실행결과 1.4.2 코드 move() move() turn_left() move() 1.5 Home 4 1.5.1 실행결과 1.5.2 코드 move() move() move() turn_left() move() move() move() turn_left() turn_left() turn_left() move() turn_left() turn_left() turn_left() move() move() move() turn_left() move() move() move() turn_left() turn_left() turn_left() move() turn_left() turn_left() turn_left() move() move() move() turn_left() move() move() move() turn_left() turn_left() turn_left() move() turn_left() turn_left() turn_left() move() move() move() turn_left() move() move() move() "],["around.html", "2 돌아다니기 (Around) 2.1 Around 1 2.2 Around 2 2.3 Around 3 2.4 Around 4", " 2 돌아다니기 (Around) 2.1 Around 1 2.1.1 실행결과 2.1.2 코드 repeat 4 : repeat 9 : move() turn_left() 2.2 Around 2 리보그가 토큰(token)을 가지고 다니는 점을 이용하여 리보그 세상을 한바퀴 삥 둘러 돌아다닌 후에 제자리로 돌아온 위치를 표식하고 이를 프로그램 종료 조건으로 설정한다. 2.2.1 실행결과 2.2.2 코드 def turn_right(): turn_left() turn_left() turn_left() # 목표지점 표식 def drop_token(): put(&quot;token&quot;) drop_token() move() while not object_here(): move() if wall_in_front() : turn_left() if right_is_clear() : turn_right() move() 2.3 Around 3 Around 2와 마찬가지로 토큰을 떨어뜨려 표식을 하고 자리를 한칸 이동한 후에 돌아다니는 작업을 수행한다. 2.3.1 실행결과 2.3.2 코드 def turn_right(): turn_left() turn_left() turn_left() # 목표지점 표식 def drop_token(): put(&quot;token&quot;) drop_token() turn_left() move() while not object_here(): if right_is_clear(): turn_right() move() elif front_is_clear(): move() else: turn_left() 2.4 Around 4 2.4.1 실행결과 2.4.2 코드 def turn_right(): turn_left() turn_left() turn_left() def turn_around(): turn_left() turn_left() # 목표지점 표식 def drop_token(): put(&quot;token&quot;) drop_token() turn_around() move() while not object_here(): if right_is_clear(): turn_right() move() elif front_is_clear(): move() else: turn_left() "],["center.html", "3 중심 (center) 3.1 중심 찾기 1", " 3 중심 (center) 3.1 중심 찾기 1 문제 바로가기 선행 지식 기본 함수 : move(), turn_left(), put() 테스트 조건: front_is_clear(), wall_in_front(), object_here() 반복 및 제어: while 루프, if 문 난이도: 5 3.1.1 실행결과 3.1.2 코드 def turn_around(): turn_left() turn_left() # 환경설정 ------------------ def put_tokens(): ## 토큰 양 끝에 두기 ---- put() while front_is_clear(): move() put() ## 제자리 돌아오기 ----- turn_around() while front_is_clear(): move() turn_around() put_tokens() # 토큰 이동 ------------------ def pick_and_put(): take() move() put() move() def move_left_to_right(): if object_here(): pick_and_put() while not object_here(): move() def move_right_to_left(): turn_around() if object_here(): pick_and_put() while not object_here(): move() def move_left_right_tokens() : move_left_to_right() move_right_to_left() turn_around() move_left_right_tokens() move_left_right_tokens() move_left_right_tokens() move_left_right_tokens() "],["harvest.html", "4 추수 (Harvest) 4.1 추수 1 4.2 추수 2 4.3 추수 3", " 4 추수 (Harvest) 4.1 추수 1 문제 바로가기 선행 지식 기본 함수 : move(), turn_left(), take() 테스트 함수 : object_here() 반복: while 혹은 if 과 결함 힌트: harvest_one_row() 함수를 작성하고 6번 반복 난이도: 3 참고: 리보그 세상 - 추가된 추수 도전과제 4.1.1 실행결과 4.1.2 코드 # 추수 위치로 이동 ---- def turn_right(): turn_left() turn_left() turn_left() def ready_harvest(): move() turn_left() move() move() turn_right() ready_harvest() # 한줄 추수 ---- def harvest_one_row(): if not object_here(): move() while object_here(): if object_here(): take() move() # harvest_one_row() # 다음 추수 위치로 이동 def turn_around(): turn_left() turn_left() def move_to_next_row(): turn_around() repeat 7: move() turn_right() move() turn_right() # move_to_next_row() # 전체 6줄 추수 repeat 6: harvest_one_row() move_to_next_row() 4.2 추수 2 문제 바로가기 선행 지식 기본 함수 : move(), turn_left(), take() 테스트 함수 : object_here() 반복: while 혹은 if 과 결함 힌트: harvest_one_row() 함수를 작성하고 6번 반복 난이도: 4 참고: 리보그 세상 - 추가된 추수 도전과제 4.2.1 실행결과 4.2.2 코드 # 추수 위치로 이동 ---- def turn_right(): turn_left() turn_left() turn_left() def ready_harvest(): move() turn_left() move() move() turn_right() ready_harvest() # 한줄 추수 ---- def harvest_one_row(): repeat 6: if not object_here(): move() while object_here(): take() # 다음 추수 위치로 이동 def turn_around(): turn_left() turn_left() def move_to_next_row(): turn_around() repeat 6: move() turn_right() move() turn_right() # 전체 6줄 추수 repeat 6: harvest_one_row() move_to_next_row() 4.3 추수 3 문제 바로가기 선행 지식 기본 함수 : move(), turn_left(), take() 테스트 함수 : object_here() 반복: while 혹은 if 과 결함 힌트: harvest_one_row() 함수를 작성하고 6번 반복 난이도: 4 참고: 리보그 세상 - 추가된 추수 도전과제 4.3.1 실행결과 4.3.2 코드 # 추수 위치로 이동 ---- def turn_right(): turn_left() turn_left() turn_left() def ready_harvest(): move() move() turn_left() move() move() turn_right() ready_harvest() # 당근 심기 ---- def fix_one_row(): repeat 6: while not object_here(): put() # 당근 1개 이상인 경우 다 뽑아내고 1개 심는다. if object_here(): while object_here(): take() put() move() # 다음 추수 위치로 이동 def turn_around(): turn_left() turn_left() def move_to_next_row(): turn_around() repeat 6: move() turn_right() move() turn_right() # 전체 6줄 추수 repeat 6: fix_one_row() move_to_next_row() "],["hurdle.html", "5 장애물 넘기 5.1 장애물 1 5.2 장애물 2 5.3 장애물 3 5.4 장애물 4", " 5 장애물 넘기 5.1 장애물 1 문제 바로가기 선행 지식 기본 함수 : move(), turn_left() 힌트: jump() 함수를 작성해서 프로그램 코드를 단순화시킬 수 있다. 난이도: 2 참고: 리보그 세상 - 추가된 추수 도전과제 5.1.1 실행결과 5.1.2 코드 def turn_right(): turn_left() turn_left() turn_left() def jump_over_hurdle(): move() turn_left() move() turn_right() move() turn_right() move() turn_left() # jump_over_hurdle() repeat 6: jump_over_hurdle() 5.2 장애물 2 문제 바로가기 선행 지식 기본 함수 : move(), turn_left() 조건 / 테스트 : at_goal() 혹은 부정(negation) 반복: while() 난이도: 3 5.2.1 실행결과 5.2.2 코드 def turn_right(): turn_left() turn_left() turn_left() def jump_over_hurdle(): move() turn_left() move() turn_right() move() turn_right() move() turn_left() # jump_over_hurdle() while not at_goal(): jump_over_hurdle() 5.3 장애물 3 문제 바로가기 선행 지식 기본 함수 : move(), turn_left() 조건 / 테스트 : at_goal(), front_is_clear(), wall_in_front(), 혹은 부정(negation) 반복과 제어: while() 루프와 if 문 난이도: 4 5.3.1 실행결과 5.3.2 코드 def turn_right(): turn_left() turn_left() turn_left() def jump_over_hurdle(): # move() &lt;-- 일반화를 위해 제거 turn_left() move() turn_right() move() turn_right() move() turn_left() # jump_over_hurdle() while not at_goal(): if front_is_clear(): move() elif wall_in_front(): jump_over_hurdle() 5.4 장애물 4 문제 바로가기 선행 지식 기본 함수 : move(), turn_left() 조건 / 테스트 : at_goal(), front_is_clear(), wall_in_front(), 혹은 부정(negation) 반복과 제어: while() 루프와 if 문 난이도: 4.5 장애물 4 프로그램은 장애물 1, 2, 3 프로그램도 정상 동작시킬 수 있어야 한다. 5.4.1 실행결과 5.4.2 코드 def turn_right(): turn_left() turn_left() turn_left() def jump_over_hurdles(): # 장애물 위쪽 올라가기 if wall_in_front(): turn_left() while not right_is_clear(): move() # 장애물 위를 넘어가기 turn_right() move() turn_right() # 장애물 내려오기 while front_is_clear(): move() # 다시 경주자세로 자세 갖추기 turn_left() while not at_goal(): if front_is_clear(): move() elif wall_in_front(): jump_over_hurdles() "],["rains.html", "6 비바람 창문 닫기 6.1 창문 닫기 1 6.2 창문 닫기 2 6.3 창문 닫기 3", " 6 비바람 창문 닫기 6.1 창문 닫기 1 문제 바로가기 선행 지식 기본 함수 : move(), turn_left(), build_wall() 난이도: 1 참고: 러플 - 비가 와요 6.1.1 실행결과 6.1.2 코드 def turn_around(): turn_left() turn_left() def close_window(): repeat 6: move() build_wall() def go_to_home(): turn_around() repeat 5: move() close_window() go_to_home() 6.2 창문 닫기 2 문제 바로가기 선행 지식 기본 함수 : move(), turn_left(), build_wall() 테스트 조건: right_is_clear(), wall_on_right(), at_goal() 반복 및 제어: while 루프, if 문 난이도: 5 참고: 러플 - 비가 와요 6.2.1 실행결과 6.2.2 코드 def turn_right(): turn_left() turn_left() turn_left() def move_to_goal(): move() turn_right() move_to_goal() move() while not at_goal(): if front_is_clear(): move() if wall_in_front(): turn_left() if right_is_clear(): turn_right() build_wall() turn_left() 6.3 창문 닫기 3 문제 바로가기 선행 지식 기본 함수 : move(), turn_left(), build_wall() 테스트 조건: right_is_clear(), wall_on_right(), at_goal() 반복 및 제어: while 루프, if 문 힌트: 우회전할지 창문을 닫을지 리보그를 한번더 이동시키면 2가지 경우가 존재한다. 난이도: 8 참고: 러플 - 비가 와요 6.3.1 실행결과 6.3.2 코드 def turn_right(): turn_left() turn_left() turn_left() def move_to_goal(): repeat 3: move() turn_right() move_to_goal() move() def go_back(): turn_left() turn_left() move() turn_left() turn_left() def close_window(): turn_right() build_wall() turn_left() while not at_goal(): if wall_in_front(): turn_left() if front_is_clear() and right_is_clear(): move() if right_is_clear(): go_back() turn_right() elif not right_is_clear(): go_back() close_window() move() "],["rain.html", "7 토큰 7.1 토큰 이동 1 7.2 토큰 이동 2 7.3 토큰 이동 3 7.4 토큰 이동 4 7.5 토큰 이동 5", " 7 토큰 7.1 토큰 이동 1 문제 바로가기 선행 지식 기본 함수 : move(), put(), take() 난이도: 1 7.1.1 실행결과 7.1.2 코드 move() take() move() put() move() 7.2 토큰 이동 2 문제 바로가기 선행 지식 기본 함수 : move(), put(), take() 난이도: 1 move_until_done() 함수를 제작해서 if문을 사용하게 되면 조금더 깔끔하게 목적을 달성할 수 있다. 7.2.1 실행결과 7.2.2 코드 def move_until_done(): move() if object_here(): take() move() put() repeat 5: move_until_done() 7.3 토큰 이동 3 문제 바로가기 선행 지식 기본 함수 : move(), put(), take() 테스트 조건: object_here(), at_goal() 반복과 제어조건: while 루프와 부정(negation) 난이도: 3 7.3.1 실행결과 7.3.2 코드 def move_until_done(): move() if object_here(): take() move() put() while not at_goal(): move_until_done() 7.4 토큰 이동 4 문제 바로가기 선행 지식 기본 함수 : move(), put(), take() 테스트 조건: object_here(), carries_object(), at_goal() 반복과 제어조건: while 루프, if 문과 부정(negation) 난이도: 5 7.4.1 실행결과 7.4.2 코드 def collect_all(): if object_here(): take() move() def put_down_all_and_move(): while carries_object(): put() move() while not at_goal(): if object_here(): collect_all() elif carries_object(): put_down_all_and_move() else: move() 7.5 토큰 이동 5 토큰 이동 5를 일반화하여 토큰이 있는 곳과 그렇지 않는 곳도 리보그가 이동하여 목적을 달성할 수 있도록 한다. 문제 바로가기 선행 지식 기본 함수 : move(), put(), take() 테스트 조건: object_here(), carries_object(), at_goal() 반복과 제어조건: while 루프, if 문과 부정(negation) 난이도: 5 7.5.1 실행결과 7.5.2 코드 def collect_all(): if object_here(): take() move() def put_down_all_and_move(): while carries_object(): put() move() while not at_goal(): if object_here(): collect_all() elif carries_object(): put_down_all_and_move() else: move() "],["newspaper.html", "8 신문배달 8.1 신문배달 1 8.2 신문배달 2", " 8 신문배달 8.1 신문배달 1 문제 바로가기 선행 지식 기본 함수 : move(), turn_left(), take(), put() 난이도: 1 8.1.1 실행결과 8.1.2 코드 def turn_right(): turn_left() turn_left() turn_left() # 계단 올라가기 ---- take() turn_left() move() turn_right() move() move() turn_left() move() turn_right() move() move() turn_left() move() turn_right() move() move() put() # 계단 내려오기 ---- turn_left() turn_left() move() move() turn_left() move() turn_right() move() move() turn_left() move() turn_right() move() move() turn_left() move() 8.2 신문배달 2 문제 바로가기 선행 지식 기본 함수 : move(), turn_left(), take(), put() 난이도: 3 힌트: up_three_steps(), down_three_steps(), turn_around() 함수를 제작하여 MS. Ada Lovelace에게 전달되는 신문업무를 모듈화시키고 take(\"token\") 함수를 호출하여 댓가를 선물로 받아 집으로 돌아온다. 8.2.1 실행결과 8.2.2 코드 def turn_right(): turn_left() turn_left() turn_left() def turn_around(): turn_left() turn_left() def up_three_steps(): repeat 3: turn_left() move() turn_right() move() move() def down_three_steps(): repeat 3: move() move() turn_left() move() turn_right() # 신문 배달 시작 take() # 계단 올라가서 러브레이스 도착 up_three_steps() # 신문 높고 토큰 받기 put() while object_here(&quot;token&quot;): take(&quot;token&quot;) # 되돌아 집에 오기 turn_around() down_three_steps() "],["maze.html", "9 미로 탈출", " 9 미로 탈출 문제 바로가기 선행 지식 기본 함수 : move(), turn_left() 테스트 조건: front_is_clear(), wall_in_front(), right_is_clear(), wall_on_right(), at_goal() 반복 while 루프, if/elif/else 조건 문 난이도: 4 9.0.1 실행결과 9.0.2 코드 def turn_right(): turn_left() turn_left() turn_left() while not at_goal(): if right_is_clear(): turn_right() move() elif front_is_clear(): move() else: turn_left() "],["storm.html", "10 폭풍 후에 … 10.1 낙엽 청소 1 10.2 낙엽 청소 2", " 10 폭풍 후에 … 10.1 낙엽 청소 1 문제 바로가기 선행 지식 기본 함수 : move(), turn_left(), take(), toss() 테스트 조건: object_here(), carries_object(), front_is_clear(), wall_in_front() 반복 while문과 제어 조건 if 문을 사용 난이도: 4 10.1.1 실행결과 10.1.2 코드 def turn_right(): turn_left() turn_left() turn_left() def turn_around(): turn_left() turn_left() while front_is_clear(): move() while object_here(): take() turn_around() repeat 5: move() turn_right() while carries_object(): toss() 10.2 낙엽 청소 2 문제 바로가기 선행 지식 기본 함수 : move(), turn_left(), take(), toss() 테스트 조건: object_here(), carries_object(), front_is_clear(), wall_in_front() 반복 while문과 제어 조건 if 문을 사용 난이도: 4 10.2.1 실행결과 10.2.2 코드 def turn_around(): turn_left() turn_left() def turn_right(): turn_left() turn_left() turn_left() def collect_leaves(): while front_is_clear(): while object_here(): take() move() def first_collect_leaves(): while front_is_clear(): while object_here(): take() move() turn_around() repeat 4: move() turn_right() move() turn_right() collect_leaves() turn_left() move() turn_left() def go_to_beginning(): while object_here(): take() turn_around() while not wall_in_front(): move() turn_left() move() turn_left() def go_to_home(): while not wall_in_front(): move() while object_here(): take() turn_left() while not at_goal(): if front_is_clear(): move() elif right_is_clear(): turn_right() elif wall_in_front(): turn_left() turn_right() while carries_object(): toss() move() first_collect_leaves() repeat 3: collect_leaves() go_to_beginning() go_to_home() "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
